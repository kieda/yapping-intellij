// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Yapping.flex

package io.hostilerobot.yapping.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import io.hostilerobot.yapping.parser.YappingTypes;import java.nio.file.Path;import java.util.ArrayDeque;import java.util.Deque;import com.intellij.lexer.FlexLexer;


class YappingLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LITERAL = 2;
  public static final int REGEX = 4;
  public static final int REGEX_CLASS = 6;
  public static final int BEFORE_SLASH = 8;
  public static final int AFTER_SLASH = 10;
  public static final int PENDING_SLASH = 12;
  public static final int BEFORE_JSCOPE = 14;
  public static final int AFTER_JSCOPE = 16;
  public static final int PENDING_JSCOPE = 18;
  public static final int BEFORE_YSCOPE = 20;
  public static final int AFTER_YSCOPE = 22;
  public static final int PENDING_YSCOPE = 24;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000"+
    "\1\u5100\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00\4\u0100\1\u5500"+
    "\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00"+
    "\1\u5900\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\42\u1f00"+
    "\1\u0100\1\u5e00\1\u5f00\11\u1f00\1\u6000\24\u1f00\1\u6100\1\u6200"+
    "\1\u1f00\1\u6300\1\u6400\1\u6500\1\u6600\2\u1f00\1\u6700\5\u1f00"+
    "\1\u6800\1\u6900\1\u6a00\5\u1f00\1\u6b00\1\u6c00\2\u1f00\1\u6d00"+
    "\1\u1f00\1\u6e00\14\u1f00\1\u6f00\4\u1f00\246\u0100\1\u7000\20\u0100"+
    "\1\u7100\1\u7200\25\u0100\1\u7300\34\u0100\1\u7400\14\u1f00\2\u0100"+
    "\1\u7500\5\u1f00\23\u0100\1\u7600\u0aec\u1f00\1\u7700\1\u7800\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\5\1\6\1\7\1\10\1\11\1\12\1\11"+
    "\1\13\1\14\1\11\1\15\1\16\1\17\1\20\1\21"+
    "\12\22\1\23\1\24\1\25\1\26\1\27\1\11\1\30"+
    "\32\31\1\32\1\33\1\34\1\11\1\31\1\35\32\31"+
    "\1\36\1\11\1\37\1\11\41\0\2\3\4\31\4\3"+
    "\1\31\2\3\1\0\7\3\1\31\4\3\1\31\5\3"+
    "\27\31\1\3\37\31\1\3\u01ca\31\4\3\14\31\16\3"+
    "\5\31\7\3\1\31\1\3\1\31\21\3\160\0\5\31"+
    "\1\3\2\31\2\3\4\31\1\3\1\31\6\3\1\31"+
    "\1\3\3\31\1\3\1\31\1\3\24\31\1\3\123\31"+
    "\1\3\213\31\1\3\5\0\2\3\246\31\1\3\46\31"+
    "\2\3\1\31\6\3\51\31\6\3\1\31\1\3\55\0"+
    "\1\3\1\0\1\3\2\0\1\3\2\0\1\3\1\0"+
    "\10\3\33\31\4\3\4\31\15\3\6\0\5\3\1\31"+
    "\4\3\13\0\1\3\1\0\3\3\53\31\37\0\4\3"+
    "\2\31\1\0\143\31\1\3\1\31\10\0\1\3\6\0"+
    "\2\31\2\0\1\3\4\0\2\31\12\0\3\31\2\3"+
    "\1\31\17\3\1\0\1\31\1\0\36\31\33\0\2\3"+
    "\131\31\13\0\1\31\16\3\12\0\41\31\11\0\2\31"+
    "\4\3\1\31\2\3\1\0\30\31\4\0\1\31\11\0"+
    "\1\31\3\0\1\31\5\0\22\3\31\31\3\0\4\3"+
    "\13\31\65\3\25\31\1\3\22\31\13\3\61\0\66\31"+
    "\3\0\1\31\22\0\1\31\7\0\12\31\2\0\2\3"+
    "\12\0\1\3\20\31\3\0\1\3\10\31\2\3\2\31"+
    "\2\3\26\31\1\3\7\31\1\3\1\31\3\3\4\31"+
    "\2\3\1\0\1\31\7\0\2\3\2\0\2\3\3\0"+
    "\1\31\10\3\1\0\4\3\2\31\1\3\3\31\2\0"+
    "\2\3\12\0\4\31\7\3\2\31\1\3\1\0\2\3"+
    "\3\0\1\3\6\31\4\3\2\31\2\3\26\31\1\3"+
    "\7\31\1\3\2\31\1\3\2\31\1\3\2\31\2\3"+
    "\1\0\1\3\5\0\4\3\2\0\2\3\3\0\3\3"+
    "\1\0\7\3\4\31\1\3\1\31\7\3\14\0\3\31"+
    "\1\0\13\3\3\0\1\3\11\31\1\3\3\31\1\3"+
    "\26\31\1\3\7\31\1\3\2\31\1\3\5\31\2\3"+
    "\1\0\1\31\10\0\1\3\3\0\1\3\3\0\2\3"+
    "\1\31\17\3\2\31\2\0\2\3\12\0\1\3\1\31"+
    "\7\3\1\31\6\0\1\3\3\0\1\3\10\31\2\3"+
    "\2\31\2\3\26\31\1\3\7\31\1\3\2\31\1\3"+
    "\5\31\2\3\1\0\1\31\7\0\2\3\2\0\2\3"+
    "\3\0\7\3\3\0\4\3\2\31\1\3\3\31\2\0"+
    "\2\3\12\0\1\3\1\31\20\3\1\0\1\31\1\3"+
    "\6\31\3\3\3\31\1\3\4\31\3\3\2\31\1\3"+
    "\1\31\1\3\2\31\3\3\2\31\3\3\3\31\3\3"+
    "\14\31\4\3\5\0\3\3\3\0\1\3\4\0\2\3"+
    "\1\31\6\3\1\0\16\3\12\0\11\3\1\31\6\3"+
    "\5\0\10\31\1\3\3\31\1\3\27\31\1\3\20\31"+
    "\3\3\1\31\7\0\1\3\3\0\1\3\4\0\7\3"+
    "\2\0\1\3\3\31\5\3\2\31\2\0\2\3\12\0"+
    "\20\3\1\31\3\0\1\3\10\31\1\3\3\31\1\3"+
    "\27\31\1\3\12\31\1\3\5\31\2\3\1\0\1\31"+
    "\7\0\1\3\3\0\1\3\4\0\7\3\2\0\7\3"+
    "\1\31\1\3\2\31\2\0\2\3\12\0\1\3\2\31"+
    "\15\3\4\0\11\31\1\3\3\31\1\3\51\31\2\0"+
    "\1\31\7\0\1\3\3\0\1\3\4\0\1\31\5\3"+
    "\3\31\1\0\7\3\3\31\2\0\2\3\12\0\12\3"+
    "\6\31\1\3\3\0\1\3\22\31\3\3\30\31\1\3"+
    "\11\31\1\3\1\31\2\3\7\31\3\3\1\0\4\3"+
    "\6\0\1\3\1\0\1\3\10\0\6\3\12\0\2\3"+
    "\2\0\15\3\60\31\1\0\2\31\7\0\4\3\10\31"+
    "\10\0\1\3\12\0\47\3\2\31\1\3\1\31\1\3"+
    "\5\31\1\3\30\31\1\3\1\31\1\3\12\31\1\0"+
    "\2\31\11\0\1\31\2\3\5\31\1\3\1\31\1\3"+
    "\6\0\2\3\12\0\2\3\4\31\40\3\1\31\27\3"+
    "\2\0\6\3\12\0\13\3\1\0\1\3\1\0\1\3"+
    "\1\0\4\3\2\0\10\31\1\3\44\31\4\3\24\0"+
    "\1\3\2\0\5\31\13\0\1\3\44\0\11\3\1\0"+
    "\71\3\53\31\24\0\1\31\12\0\6\3\6\31\4\0"+
    "\4\31\3\0\1\31\3\0\2\31\7\0\3\31\4\0"+
    "\15\31\14\0\1\31\17\0\2\3\46\31\1\3\1\31"+
    "\5\3\1\31\2\3\53\31\1\3\115\31\1\3\4\31"+
    "\2\3\7\31\1\3\1\31\1\3\4\31\2\3\51\31"+
    "\1\3\4\31\2\3\41\31\1\3\4\31\2\3\7\31"+
    "\1\3\1\31\1\3\4\31\2\3\17\31\1\3\71\31"+
    "\1\3\4\31\2\3\103\31\2\3\3\0\40\3\20\31"+
    "\20\3\126\31\2\3\6\31\3\3\u016c\31\2\3\21\31"+
    "\1\3\32\31\5\3\113\31\3\3\13\31\7\3\15\31"+
    "\1\3\4\31\3\0\13\3\22\31\3\0\13\3\22\31"+
    "\2\0\14\3\15\31\1\3\3\31\1\3\2\0\14\3"+
    "\64\31\40\0\3\3\1\31\3\3\2\31\1\0\2\3"+
    "\12\0\41\3\4\0\1\3\12\0\6\3\131\31\7\3"+
    "\5\31\2\0\42\31\1\0\1\31\5\3\106\31\12\3"+
    "\37\31\1\3\14\0\4\3\14\0\12\3\12\0\36\31"+
    "\2\3\5\31\13\3\54\31\4\3\32\31\6\3\12\0"+
    "\46\3\27\31\5\0\4\3\65\31\12\0\1\3\35\0"+
    "\2\3\13\0\6\3\12\0\15\3\1\31\10\3\16\0"+
    "\1\3\2\0\77\3\5\0\57\31\21\0\7\31\4\3"+
    "\12\0\21\3\11\0\14\3\3\0\36\31\15\0\2\31"+
    "\12\0\54\31\16\0\14\3\44\31\24\0\10\3\12\0"+
    "\3\3\3\31\12\0\44\31\2\3\11\31\7\3\53\31"+
    "\2\3\3\31\20\3\3\0\1\3\25\0\4\31\1\0"+
    "\6\31\1\0\2\31\3\0\1\31\5\3\300\31\72\0"+
    "\1\3\5\0\26\31\2\3\6\31\2\3\46\31\2\3"+
    "\6\31\2\3\10\31\1\3\1\31\1\3\1\31\1\3"+
    "\1\31\1\3\37\31\2\3\65\31\1\3\7\31\1\3"+
    "\1\31\3\3\3\31\1\3\7\31\3\3\4\31\2\3"+
    "\6\31\4\3\15\31\5\3\3\31\1\3\7\31\16\3"+
    "\5\0\32\3\5\0\20\3\2\31\23\3\1\31\13\3"+
    "\5\0\1\3\12\0\1\3\1\31\15\3\1\31\20\3"+
    "\15\31\3\3\40\31\20\3\15\0\4\3\1\0\3\3"+
    "\14\0\21\3\1\31\4\3\1\31\2\3\12\31\1\3"+
    "\1\31\3\3\5\31\6\3\1\31\1\3\1\31\1\3"+
    "\1\31\1\3\4\31\1\3\13\31\2\3\4\31\5\3"+
    "\5\31\4\3\1\31\21\3\51\31\u0177\3\57\31\1\3"+
    "\57\31\1\3\205\31\6\3\4\31\3\0\2\31\14\3"+
    "\46\31\1\3\1\31\5\3\1\31\2\3\70\31\7\3"+
    "\1\31\17\3\1\0\27\31\11\3\7\31\1\3\7\31"+
    "\1\3\7\31\1\3\7\31\1\3\7\31\1\3\7\31"+
    "\1\3\7\31\1\3\7\31\1\3\40\0\57\3\1\31"+
    "\325\3\3\31\31\3\11\31\6\0\1\3\5\31\2\3"+
    "\5\31\4\3\126\31\2\3\2\0\2\3\3\31\1\3"+
    "\132\31\1\3\4\31\5\3\53\31\1\3\136\31\21\3"+
    "\40\31\60\3\320\31\100\3\375\31\3\3\215\31\103\3"+
    "\56\31\2\3\15\31\3\3\20\31\12\0\2\31\24\3"+
    "\57\31\1\0\4\3\12\0\1\3\37\31\2\0\120\31"+
    "\2\0\45\3\11\31\2\3\147\31\2\3\65\31\2\3"+
    "\11\31\52\3\15\31\1\0\3\31\1\0\4\31\1\0"+
    "\27\31\5\0\4\3\1\0\13\3\1\31\7\3\64\31"+
    "\14\3\2\0\62\31\22\0\12\3\12\0\6\3\22\0"+
    "\6\31\3\3\1\31\1\3\2\31\13\0\34\31\10\0"+
    "\2\3\27\31\15\0\14\3\35\31\3\3\4\0\57\31"+
    "\16\0\16\3\1\31\12\0\6\3\5\31\1\0\12\31"+
    "\12\0\5\31\1\3\51\31\16\0\11\3\3\31\1\0"+
    "\10\31\2\0\2\3\12\0\6\3\27\31\3\3\1\31"+
    "\3\0\62\31\1\0\1\31\3\0\2\31\2\0\5\31"+
    "\2\0\1\31\1\0\1\31\30\3\3\31\2\3\13\31"+
    "\5\0\2\3\3\31\2\0\12\3\6\31\2\3\6\31"+
    "\2\3\6\31\11\3\7\31\1\3\7\31\1\3\53\31"+
    "\1\3\16\31\6\3\163\31\10\0\1\3\2\0\2\3"+
    "\12\0\6\3\244\31\14\3\27\31\4\3\61\31\4\3"+
    "\156\31\2\3\152\31\46\3\7\31\14\3\5\31\5\3"+
    "\1\31\1\0\12\31\1\3\15\31\1\3\5\31\1\3"+
    "\1\31\1\3\2\31\1\3\2\31\1\3\154\31\41\3"+
    "\153\31\22\3\100\31\2\3\66\31\50\3\15\31\3\3"+
    "\20\0\20\3\20\0\3\3\2\31\30\3\3\31\31\3"+
    "\1\31\6\3\5\31\1\3\207\31\2\3\1\0\4\3"+
    "\1\31\13\3\12\0\7\3\32\31\4\3\1\31\1\3"+
    "\32\31\13\3\131\31\3\3\6\31\2\3\6\31\2\3"+
    "\6\31\2\3\3\31\3\3\2\31\3\3\2\31\22\3"+
    "\3\0\4\3\14\31\1\3\32\31\1\3\23\31\1\3"+
    "\2\31\1\3\17\31\2\3\16\31\42\3\173\31\105\3"+
    "\65\31\210\3\1\0\202\3\35\31\3\3\61\31\17\3"+
    "\1\0\37\3\40\31\15\3\36\31\5\3\46\31\5\0"+
    "\5\3\36\31\2\3\44\31\4\3\10\31\1\3\5\31"+
    "\52\3\236\31\2\3\12\0\6\3\44\31\4\3\44\31"+
    "\4\3\50\31\10\3\64\31\234\3\67\31\11\3\26\31"+
    "\12\3\10\31\230\3\6\31\2\3\1\31\1\3\54\31"+
    "\1\3\2\31\3\3\1\31\2\3\27\31\12\3\27\31"+
    "\11\3\37\31\101\3\23\31\1\3\2\31\12\3\26\31"+
    "\12\3\32\31\106\3\70\31\6\3\2\31\100\3\1\31"+
    "\3\0\1\3\2\0\5\3\4\0\4\31\1\3\3\31"+
    "\1\3\35\31\2\3\3\0\4\3\1\0\40\3\35\31"+
    "\3\3\35\31\43\3\10\31\1\3\34\31\2\0\31\3"+
    "\66\31\12\3\26\31\12\3\23\31\15\3\22\31\156\3"+
    "\111\31\67\3\63\31\15\3\63\31\15\3\44\31\4\0"+
    "\10\3\12\0\u0146\3\52\31\1\3\2\0\3\3\2\31"+
    "\116\3\35\31\12\3\1\31\10\3\26\31\13\0\137\3"+
    "\25\31\33\3\27\31\11\3\3\0\65\31\17\0\37\3"+
    "\12\0\17\3\4\0\55\31\13\0\2\3\1\0\17\3"+
    "\1\0\2\3\31\31\7\3\12\0\6\3\3\0\44\31"+
    "\16\0\1\3\12\0\4\3\1\31\2\0\1\31\10\3"+
    "\43\31\1\0\2\3\1\31\11\3\3\0\60\31\16\0"+
    "\4\31\4\3\4\0\1\3\14\0\1\31\1\3\1\31"+
    "\43\3\22\31\1\3\31\31\14\0\6\3\1\0\101\3"+
    "\7\31\1\3\1\31\1\3\4\31\1\3\17\31\1\3"+
    "\12\31\7\3\57\31\14\0\5\3\12\0\6\3\4\0"+
    "\1\3\10\31\2\3\2\31\2\3\26\31\1\3\7\31"+
    "\1\3\2\31\1\3\5\31\1\3\2\0\1\31\7\0"+
    "\2\3\2\0\2\3\3\0\2\3\1\31\6\3\1\0"+
    "\5\3\5\31\2\0\2\3\7\0\3\3\5\0\213\3"+
    "\65\31\22\0\4\31\5\3\12\0\4\3\1\0\3\31"+
    "\36\3\60\31\24\0\2\31\1\3\1\31\10\3\12\0"+
    "\246\3\57\31\7\0\2\3\11\0\27\3\4\31\2\0"+
    "\42\3\60\31\21\0\3\3\1\31\13\3\12\0\46\3"+
    "\53\31\15\0\1\31\7\3\12\0\66\3\33\31\2\3"+
    "\17\0\4\3\12\0\306\3\54\31\17\0\145\3\100\31"+
    "\12\0\25\3\10\31\2\3\1\31\2\3\10\31\1\3"+
    "\2\31\1\3\30\31\6\0\1\3\2\0\2\3\4\0"+
    "\1\31\1\0\1\31\2\0\14\3\12\0\106\3\10\31"+
    "\2\3\47\31\7\0\2\3\7\0\1\31\1\3\1\31"+
    "\1\0\33\3\1\31\12\0\50\31\7\0\1\31\4\0"+
    "\10\3\1\0\10\3\1\31\13\0\56\31\20\0\3\3"+
    "\1\31\42\3\71\31\7\3\11\31\1\3\45\31\10\0"+
    "\1\3\10\0\1\31\17\3\12\0\30\3\36\31\2\3"+
    "\26\0\1\3\16\0\111\3\7\31\1\3\2\31\1\3"+
    "\46\31\6\0\3\3\1\0\1\3\2\0\1\3\7\0"+
    "\1\31\1\0\10\3\12\0\6\3\6\31\1\3\2\31"+
    "\1\3\40\31\5\0\1\3\2\0\1\3\5\0\1\31"+
    "\7\3\12\0\u0136\3\23\31\4\0\271\3\1\31\54\3"+
    "\4\31\37\3\232\31\146\3\157\31\21\3\304\31\274\3"+
    "\57\31\1\3\11\0\307\3\107\31\271\3\71\31\7\3"+
    "\37\31\1\3\12\0\146\3\36\31\2\3\5\0\13\3"+
    "\60\31\7\0\11\3\4\31\14\3\12\0\11\3\25\31"+
    "\5\3\23\31\260\3\100\31\200\3\113\31\4\3\1\0"+
    "\1\31\67\0\7\3\4\0\15\31\100\3\2\31\1\3"+
    "\1\31\1\0\13\3\2\0\16\3\370\31\10\3\326\31"+
    "\52\3\11\31\367\3\37\31\61\3\3\31\21\3\4\31"+
    "\10\3\u018c\31\4\3\153\31\5\3\15\31\3\3\11\31"+
    "\7\3\12\31\3\3\2\0\1\3\4\0\301\3\5\0"+
    "\3\3\26\0\2\3\7\0\36\3\4\0\224\3\3\0"+
    "\273\3\125\31\1\3\107\31\1\3\2\31\2\3\1\31"+
    "\2\3\2\31\2\3\4\31\1\3\14\31\1\3\1\31"+
    "\1\3\7\31\1\3\101\31\1\3\4\31\2\3\10\31"+
    "\1\3\7\31\1\3\34\31\1\3\4\31\1\3\5\31"+
    "\1\3\1\31\3\3\7\31\1\3\u0154\31\2\3\31\31"+
    "\1\3\31\31\1\3\37\31\1\3\31\31\1\3\37\31"+
    "\1\3\31\31\1\3\37\31\1\3\31\31\1\3\37\31"+
    "\1\3\31\31\1\3\10\31\2\3\151\0\4\3\62\0"+
    "\10\3\1\0\16\3\1\0\26\3\5\0\1\3\17\0"+
    "\120\3\7\0\1\3\21\0\2\3\7\0\1\3\2\0"+
    "\1\3\5\0\325\3\55\31\3\3\7\0\7\31\2\3"+
    "\12\0\4\3\1\31\u0171\3\54\31\16\0\5\3\306\31"+
    "\13\3\7\0\51\3\104\31\7\0\1\31\4\3\12\0"+
    "\u0156\3\1\31\117\3\4\31\1\3\33\31\1\3\2\31"+
    "\1\3\1\31\2\3\1\31\1\3\12\31\1\3\4\31"+
    "\1\3\1\31\1\3\1\31\6\3\1\31\4\3\1\31"+
    "\1\3\1\31\1\3\1\31\1\3\3\31\1\3\2\31"+
    "\1\3\1\31\2\3\1\31\1\3\1\31\1\3\1\31"+
    "\1\3\1\31\1\3\1\31\1\3\2\31\1\3\1\31"+
    "\2\3\4\31\1\3\7\31\1\3\4\31\1\3\4\31"+
    "\1\3\1\31\1\3\12\31\1\3\21\31\5\3\3\31"+
    "\1\3\5\31\1\3\21\31\u0134\3\12\0\6\3\336\31"+
    "\42\3\65\31\13\3\336\31\2\3\u0182\31\16\3\u0131\31"+
    "\37\3\36\31\342\3\113\31\266\3\1\0\36\3\140\0"+
    "\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30976];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\6\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\6\1\30\1\32\1\6\1\33"+
    "\1\30\1\34\1\35\1\36\1\37\1\40\1\35\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\14\1\60"+
    "\1\61\1\62\1\63\1\0\2\5\1\64\1\65\1\30"+
    "\1\35\2\40\1\42\2\51\1\0\2\57\1\0\1\66"+
    "\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\100\0\140\0\200\0\240\0\300\0\340"+
    "\0\u0100\0\u0120\0\u0140\0\u0160\0\u0180\0\u01a0\0\u01c0\0\u01e0"+
    "\0\u01e0\0\u0200\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0"+
    "\0\u0220\0\u01e0\0\u01e0\0\u0240\0\u01e0\0\u0260\0\u01e0\0\u01e0"+
    "\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u0280\0\u01e0\0\u02a0"+
    "\0\u02c0\0\u01e0\0\u02e0\0\u01e0\0\u0300\0\u01e0\0\u0320\0\u0340"+
    "\0\u01e0\0\u0360\0\u0380\0\u01e0\0\u03a0\0\u01e0\0\u01e0\0\u01e0"+
    "\0\u01e0\0\u03c0\0\u03e0\0\u0400\0\u01e0\0\u01e0\0\u0420\0\u0440"+
    "\0\u0460\0\u0480\0\u04a0\0\u01e0\0\u04c0\0\u04e0\0\u0500\0\u0520"+
    "\0\u01e0\0\u0540\0\u01e0\0\u01e0\0\u01e0\0\u0560\0\u01e0\0\u0580"+
    "\0\u05a0\0\u01e0\0\u05c0\0\u05e0\0\u01e0\0\u0600\0\u0620\0\u01e0"+
    "\0\u01e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\16\2\17\1\16\1\17\1\20\1\21\1\22\2\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\23\1\36\1\37\1\23\1\40\1\16"+
    "\1\41\1\23\1\42\1\43\1\44\1\45\6\46\1\47"+
    "\24\46\1\50\4\46\32\51\1\52\1\53\1\51\1\54"+
    "\2\51\33\55\1\50\1\56\3\55\1\57\2\60\1\57"+
    "\1\60\1\20\1\61\1\62\3\57\1\25\1\26\1\57"+
    "\1\30\1\63\1\57\1\64\1\57\1\35\1\23\1\36"+
    "\1\37\1\23\1\40\1\57\1\41\1\57\1\42\1\56"+
    "\1\44\1\45\1\65\2\17\1\65\1\17\1\23\1\61"+
    "\1\22\3\65\1\25\1\26\1\65\1\23\2\65\1\33"+
    "\1\65\6\23\1\65\1\41\1\65\1\42\1\56\1\44"+
    "\1\45\1\16\2\17\1\16\1\17\1\20\1\66\1\22"+
    "\2\23\1\24\1\67\1\26\1\27\1\30\1\31\1\23"+
    "\1\64\1\34\1\35\1\23\1\36\1\37\1\23\1\40"+
    "\1\16\1\70\1\23\1\42\1\43\1\71\1\45\1\72"+
    "\2\73\1\23\1\73\1\20\1\61\1\74\1\72\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\75\1\76"+
    "\1\72\1\35\1\23\1\36\1\37\1\23\1\40\1\72"+
    "\1\41\1\23\1\42\1\56\1\44\1\45\1\23\2\17"+
    "\1\23\1\17\1\23\1\61\1\22\1\77\2\23\1\25"+
    "\1\26\14\23\1\77\1\41\1\23\1\42\1\56\1\44"+
    "\1\45\1\16\2\17\1\16\1\17\1\20\1\66\1\22"+
    "\2\23\1\24\1\67\1\26\1\27\1\30\1\31\1\75"+
    "\1\76\1\34\1\35\1\23\1\36\1\37\1\23\1\40"+
    "\1\16\1\70\1\23\1\42\1\43\1\71\1\45\1\100"+
    "\2\101\1\100\1\101\1\20\1\61\1\102\2\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\103\1\104\1\76\1\105"+
    "\1\35\1\23\1\36\1\37\1\23\1\40\1\100\1\41"+
    "\1\23\1\42\1\56\1\44\1\45\1\106\2\17\1\106"+
    "\1\17\1\23\1\61\1\22\3\23\1\25\1\26\5\23"+
    "\1\107\6\23\1\106\1\41\1\23\1\42\1\56\1\44"+
    "\1\45\1\16\2\17\1\16\1\17\1\20\1\66\1\22"+
    "\2\23\1\24\1\67\1\26\1\27\1\30\1\31\1\104"+
    "\1\76\1\34\1\35\1\23\1\36\1\37\1\23\1\40"+
    "\1\16\1\70\1\23\1\42\1\43\1\71\1\45\1\16"+
    "\2\0\1\16\13\0\1\110\2\0\1\16\6\0\1\16"+
    "\7\0\2\17\1\0\1\17\73\0\2\22\1\111\1\22"+
    "\1\112\33\22\27\0\1\113\32\0\1\34\34\0\1\114"+
    "\20\0\6\46\1\0\24\46\1\0\4\46\40\115\32\51"+
    "\2\0\1\51\1\0\2\51\32\115\1\56\2\115\1\56"+
    "\2\115\33\55\2\0\3\55\1\57\2\0\1\57\4\0"+
    "\3\57\2\0\1\57\1\0\1\116\1\57\1\0\1\57"+
    "\6\0\1\57\1\0\1\57\5\0\2\60\1\0\1\60"+
    "\33\0\2\62\1\117\1\62\1\120\33\62\1\57\2\0"+
    "\1\57\4\0\3\57\2\0\1\57\1\0\1\116\1\57"+
    "\1\0\1\57\4\0\1\113\1\0\1\57\1\0\1\57"+
    "\4\0\1\65\2\0\1\65\4\0\3\65\2\0\1\65"+
    "\1\0\1\121\1\65\1\0\1\65\6\0\1\65\1\0"+
    "\1\65\4\0\1\72\7\0\1\72\11\0\1\72\6\0"+
    "\1\72\7\0\2\73\1\0\1\73\33\0\2\74\1\122"+
    "\1\74\1\123\33\74\1\77\7\0\1\77\11\0\1\77"+
    "\6\0\1\77\6\0\1\100\2\0\1\100\13\0\1\124"+
    "\2\0\1\100\6\0\1\100\7\0\2\101\1\0\1\101"+
    "\33\0\2\102\1\125\1\102\1\126\33\102\1\100\2\0"+
    "\1\100\23\0\1\113\1\0\1\100\6\0\1\100\2\0"+
    "\1\100\13\0\1\124\2\0\1\105\6\0\1\100\6\0"+
    "\1\106\2\0\1\106\13\0\1\127\2\0\1\106\6\0"+
    "\1\106\30\0\1\107\15\0\1\16\2\0\1\16\25\0"+
    "\1\16\10\0\1\111\35\0\1\57\2\0\1\57\4\0"+
    "\3\57\2\0\1\57\1\0\1\116\1\57\1\0\1\57"+
    "\4\0\1\130\1\0\1\57\1\0\1\57\6\0\1\117"+
    "\35\0\1\65\2\0\1\65\4\0\3\65\2\0\1\65"+
    "\1\0\1\121\1\65\1\0\1\65\4\0\1\131\1\0"+
    "\1\65\1\0\1\65\6\0\1\122\35\0\1\100\2\0"+
    "\1\100\25\0\1\100\10\0\1\125\35\0\1\106\2\0"+
    "\1\106\25\0\1\106\6\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1600];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\2\1\2\11\1\1\6\11\1\1\2\11\1\1"+
    "\1\11\1\1\7\11\1\1\1\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\2\1\1\11\2\1\1\11\1\1"+
    "\4\11\3\1\2\11\5\1\1\11\3\1\1\0\1\11"+
    "\1\1\3\11\1\1\1\11\2\1\1\11\1\1\1\0"+
    "\1\11\1\1\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

enum PathContext{
      // base is used when we're not actively in a yapping segment.
      BASE(YYINITIAL, YYINITIAL),
      FILE(AFTER_SLASH, BEFORE_SLASH),
      JAVA(AFTER_JSCOPE, BEFORE_JSCOPE),
      YAPPING(AFTER_YSCOPE, BEFORE_YSCOPE);
      private final int fallback;
      private final int initialState;
      PathContext(int initialState, int fallback) {
          this.initialState = initialState;
          this.fallback = fallback;
      }
}
// we want to handle java paths !com.user.Plugin
// different from file paths @file/user/pugin.yap
// different from YAPPING paths { ... }.my-value.3.length
//Deque<Integer> CONTEXT = new ArrayDeque<>();
private Deque<PathContext> context = new ArrayDeque<>();
{
  // top level is all BASE
  // this item should be here throughout all lexing
  context.push(PathContext.BASE);
}

private String getStateName(int state) {
    switch(state) {
        case AFTER_JSCOPE: return "AFTER_JSCOPE";
        case AFTER_SLASH: return "AFTER_SLASH";
        case AFTER_YSCOPE: return "AFTER_YSCOPE";
        case BEFORE_JSCOPE: return "BEFORE_JSCOPE";
        case BEFORE_SLASH: return "BEFORE_SLASH";
        case BEFORE_YSCOPE: return "BEFORE_YSCOPE";
        case PENDING_JSCOPE: return "PENDING_JSCOPE";
        case PENDING_SLASH: return "PENDING_SLASH";
        case PENDING_YSCOPE: return "PENDING_YSCOPE";
        case LITERAL: return "LITERAL";
        case REGEX: return "REGEX";
        case REGEX_CLASS: return "REGEX_CLASS";
        case YYINITIAL: return "YYINITIAL";
        default: return "ERROR_UNKNOWN_STATE";
    }
}

private void debugCurrentState(String methodName) {
    System.out.println(
        methodName + ": " + getStateName(yystate()) + ": " + context
    );
}

private int getCurrentFallback() {
    debugCurrentState("getCurrentFallback");
    return context.peek().fallback;
}
// file path interrupts the current segment and starts a new one that's file
// @asdf!asdf asdf!asdf !asdf !asdf
private void encounterFilePath() {
    debugCurrentState("START encounterFilePath");
    endTransition();
    context.push(PathContext.FILE);
    yybegin(PathContext.FILE.initialState);
    debugCurrentState("END encounterFilePath");
}
private void encounterJavaPath() {
    debugCurrentState("START encounterJavaPath");
    endTransition();
    context.push(PathContext.JAVA);
    yybegin(PathContext.JAVA.initialState);
    debugCurrentState("END encounterJavaPath");
}

// new path that starts with a regex
private void encounterRegexSegment() {
    debugCurrentState("START encounterRegexSegment");
    endTransition();
    context.push(PathContext.YAPPING);
    yybegin(REGEX);
    debugCurrentState("END encounterRegexSegment");
}
// new path that starts with a literal
// !asdf "asdf"
//       ^
private void encounterLiteralSegment() {
    debugCurrentState("START encounterLiteralSegment");
    endTransition();
    context.push(PathContext.YAPPING);
    yybegin(LITERAL);
    debugCurrentState("END encounterLiteralSegment");
}

// open parentheses on a new yapping path, e.g. [ ( {
// asdf ( .. )
//      ^
// !asdf ( .. )
//       ^
private void encounterOpenSegment() {
    debugCurrentState("START encounterOpenSegment");
    endTransition();
    context.push(PathContext.BASE);
    yybegin(PathContext.BASE.initialState);
    debugCurrentState("END encounterOpenSegment");
}

// asdf asdf
//      ^
// !asdf asdf
//       ^
private void encounterYappingPath() {
    debugCurrentState("START encounterYappingPath");
    endTransition();
    context.push(PathContext.YAPPING);
    yybegin(PathContext.YAPPING.fallback);
    debugCurrentState("END encounterYappingPath");
}

// !asdf=asdf
//      ^
// @asdf, asdf
//      ^
private void endCurrentPath() {
    debugCurrentState("START endCurrentPath");
    endTransition();
    yybegin(PathContext.BASE.initialState);
    debugCurrentState("END endCurrentPath");
}

// ends the current segment
private void endTransition() {
    // encounter a start of a new yapping segment after PENDING
    if(context.size() > 1 && context.peek() != PathContext.BASE) {
        // !asdf.asdf  =  asdf
        // [F, B]     [B] [Y, B]
        context.pop();
        if(context.peek() != PathContext.BASE) {
            // should never happen but we check anyway
            throw new IllegalStateException("Expected BASE instead found " + context.peek());
        }
    }
}

private void openCurrentSegment() {
    debugCurrentState("START openCurrentSegment");
    // encounter a (, {, or [ while in a segment
    context.push(PathContext.BASE);
    if(yystate() != PathContext.BASE.initialState) {
        yybegin(PathContext.BASE.initialState);
    }
    debugCurrentState("END openCurrentSegment");
}
private void closeCurrentSegment() {
    debugCurrentState("START closeCurrentSegment");
    // encounter ), ], or }
    if(context.size() > 1 && context.peek() == PathContext.BASE) {
        context.pop();
        // !sadf[asdf]
        //           ^
        // sadf[[asdf]]
        //           ^^
        PathContext contextResult = context.peek();
        yybegin(contextResult.fallback);
    } else if(context.size() > 2 && context.peek() != PathContext.BASE) {
        // !sa/df[!asdf]as/df
        //             ^
        context.pop(); // stop the current java or file path
        // context.size() > 1
        if(context.peek() != PathContext.BASE) {
            // should never happen but we check anyway
            throw new IllegalStateException("Expected BASE instead found " + context.peek());
        }
        // remove this context - it corresponds to the opening brace which has now just ended
        context.pop();
        // context.size() > 0

        PathContext contextResult = context.peek();
        // we return to this context
        yybegin(contextResult.fallback);
    } else {
        // will only occur if we have a sequence with
        // sadf] or !asdf]
        if(context.size() > 1) {
            context.pop();
        }
        yybegin(PathContext.YAPPING.fallback);
    }
    // todo - should we throw if we encounter mismatched segments?
    //        ex: asdf)asdf
    //        currently we just fall back to YAPPING and let the parser deal with it
    debugCurrentState("END closeCurrentSegment");
}

private static String zzToPrintable(CharSequence cs) {
    return zzToPrintable(cs.toString());
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  YappingLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }

  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case LITERAL: {
              System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: <<EOF>>");
              System.out.println("action [521] { throw new Error(\"EOF while parsing string\"); }");
              throw new Error("EOF while parsing string");
            }  // fall though
            case 90: break;
            case REGEX: {
              System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: <<EOF>>");
              System.out.println("action [534] { throw new Error(\"EOF while parsing `regex`\"); }");
              throw new Error("EOF while parsing `regex`");
            }  // fall though
            case 91: break;
            case REGEX_CLASS: {
              System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: <<EOF>>");
              System.out.println("action [545] { throw new Error(\"EOF while parsing `regex`\"); }");
              throw new Error("EOF while parsing `regex`");
            }  // fall though
            case 92: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [359] { encounterYappingPath();"+ZZ_NL+"                                                        return YappingTypes.YNAME; }");
            { encounterYappingPath();
                                                        return YappingTypes.YNAME;
            }
          // fall through
          case 56: break;
          case 2:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [357] { return YappingTypes.WHITESPACE; }");
            { return YappingTypes.WHITESPACE;
            }
          // fall through
          case 57: break;
          case 3:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [329] { encounterJavaPath();"+ZZ_NL+"                                                        return YappingTypes.JPATH_START; }");
            { encounterJavaPath();
                                                        return YappingTypes.JPATH_START;
            }
          // fall through
          case 58: break;
          case 4:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [372] { encounterLiteralSegment(); }");
            { encounterLiteralSegment();
            }
          // fall through
          case 59: break;
          case 5:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [356] { return YappingTypes.COMMENT; }");
            { return YappingTypes.COMMENT;
            }
          // fall through
          case 60: break;
          case 6:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [548] { return TokenType.BAD_CHARACTER; }");
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 61: break;
          case 7:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [414] { endCurrentPath();"+ZZ_NL+"                                                        return YappingTypes.AND; }");
            { endCurrentPath();
                                                        return YappingTypes.AND;
            }
          // fall through
          case 62: break;
          case 8:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [397] { openCurrentSegment();"+ZZ_NL+"                                                        return YappingTypes.PRECEDENCE_START; }");
            { openCurrentSegment();
                                                        return YappingTypes.PRECEDENCE_START;
            }
          // fall through
          case 63: break;
          case 9:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [401] { closeCurrentSegment();"+ZZ_NL+"                                                        return YappingTypes.PRECEDENCE_END; }");
            { closeCurrentSegment();
                                                        return YappingTypes.PRECEDENCE_END;
            }
          // fall through
          case 64: break;
          case 10:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [418] { endCurrentPath();"+ZZ_NL+"                                                        return YappingTypes.PLUS; }");
            { endCurrentPath();
                                                        return YappingTypes.PLUS;
            }
          // fall through
          case 65: break;
          case 11:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [345] { endCurrentPath();"+ZZ_NL+"                                                        return YappingTypes.LIST_SEP; }");
            { endCurrentPath();
                                                        return YappingTypes.LIST_SEP;
            }
          // fall through
          case 66: break;
          case 12:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [422] { endCurrentPath();"+ZZ_NL+"                                                        return YappingTypes.MINUS; }");
            { endCurrentPath();
                                                        return YappingTypes.MINUS;
            }
          // fall through
          case 67: break;
          case 13:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [376] { return YappingTypes.DOT; }");
            { return YappingTypes.DOT;
            }
          // fall through
          case 68: break;
          case 14:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [377] { return YappingTypes.SLASH; }");
            { return YappingTypes.SLASH;
            }
          // fall through
          case 69: break;
          case 15:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [363] { encounterYappingPath();"+ZZ_NL+"                                                        return YappingTypes.NATURAL; }");
            { encounterYappingPath();
                                                        return YappingTypes.NATURAL;
            }
          // fall through
          case 70: break;
          case 16:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [349] { endCurrentPath();"+ZZ_NL+"                                                        return YappingTypes.PROPERTY_SEP; }");
            { endCurrentPath();
                                                        return YappingTypes.PROPERTY_SEP;
            }
          // fall through
          case 71: break;
          case 17:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [341] { endCurrentPath();"+ZZ_NL+"                                                        return YappingTypes.PAIR_SEP; }");
            { endCurrentPath();
                                                        return YappingTypes.PAIR_SEP;
            }
          // fall through
          case 72: break;
          case 18:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [324] { /* fall back to BEFORE_SLASH when we\'re done parsing regex or literal */"+ZZ_NL+"                                                        encounterFilePath();"+ZZ_NL+"                                                        return YappingTypes.FPATH_START; }");
            { /* fall back to BEFORE_SLASH when we're done parsing regex or literal */
                                                        encounterFilePath();
                                                        return YappingTypes.FPATH_START;
            }
          // fall through
          case 73: break;
          case 19:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [389] { openCurrentSegment();"+ZZ_NL+"                                                        return YappingTypes.LIST_START; }");
            { openCurrentSegment();
                                                        return YappingTypes.LIST_START;
            }
          // fall through
          case 74: break;
          case 20:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [393] { closeCurrentSegment();"+ZZ_NL+"                                                        return YappingTypes.LIST_END; }");
            { closeCurrentSegment();
                                                        return YappingTypes.LIST_END;
            }
          // fall through
          case 75: break;
          case 21:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [368] { encounterRegexSegment(); }");
            { encounterRegexSegment();
            }
          // fall through
          case 76: break;
          case 22:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [381] { openCurrentSegment();"+ZZ_NL+"                                                        return YappingTypes.MAP_START; }");
            { openCurrentSegment();
                                                        return YappingTypes.MAP_START;
            }
          // fall through
          case 77: break;
          case 23:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [385] { closeCurrentSegment();"+ZZ_NL+"                                                        return YappingTypes.MAP_END; }");
            { closeCurrentSegment();
                                                        return YappingTypes.MAP_END;
            }
          // fall through
          case 78: break;
          case 24:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [518] {  }");
            { 
            }
          // fall through
          case 79: break;
          case 25:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [513] { yybegin(getCurrentFallback());"+ZZ_NL+"                                                        return YappingTypes.LITERAL; }");
            { yybegin(getCurrentFallback());
                                                        return YappingTypes.LITERAL;
            }
          // fall through
          case 80: break;
          case 26:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [527] { yybegin(REGEX_CLASS); }");
            { yybegin(REGEX_CLASS);
            }
          // fall through
          case 81: break;
          case 27:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [529] { yybegin(getCurrentFallback()); return YappingTypes.REGEX; }");
            { yybegin(getCurrentFallback()); return YappingTypes.REGEX;
            }
          // fall through
          case 82: break;
          case 28:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [540] { yybegin(REGEX); }");
            { yybegin(REGEX);
            }
          // fall through
          case 83: break;
          case 29:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [437] { return YappingTypes.FNAME; }");
            { return YappingTypes.FNAME;
            }
          // fall through
          case 84: break;
          case 30:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [447] { yybegin(PENDING_SLASH); return YappingTypes.WHITESPACE; }");
            { yybegin(PENDING_SLASH); return YappingTypes.WHITESPACE;
            }
          // fall through
          case 85: break;
          case 31:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [410] { yybegin(LITERAL); }");
            { yybegin(LITERAL);
            }
          // fall through
          case 86: break;
          case 32:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [446] { yybegin(PENDING_SLASH); return YappingTypes.COMMENT; }");
            { yybegin(PENDING_SLASH); return YappingTypes.COMMENT;
            }
          // fall through
          case 87: break;
          case 33:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [444] { yybegin(AFTER_SLASH); return YappingTypes.SLASH; }");
            { yybegin(AFTER_SLASH); return YappingTypes.SLASH;
            }
          // fall through
          case 88: break;
          case 34:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [476] { yybegin(BEFORE_SLASH); return YappingTypes.FNAME; }");
            { yybegin(BEFORE_SLASH); return YappingTypes.FNAME;
            }
          // fall through
          case 89: break;
          case 35:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [280] { // we are encountering a new literal"+ZZ_NL+"                                                        encounterLiteralSegment(); }");
            { // we are encountering a new literal
                                                        encounterLiteralSegment();
            }
          // fall through
          case 90: break;
          case 36:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [311] { encounterOpenSegment();"+ZZ_NL+"                                                        return YappingTypes.PRECEDENCE_START; }");
            { encounterOpenSegment();
                                                        return YappingTypes.PRECEDENCE_START;
            }
          // fall through
          case 91: break;
          case 37:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [303] { encounterOpenSegment();"+ZZ_NL+"                                                        return YappingTypes.LIST_START; }");
            { encounterOpenSegment();
                                                        return YappingTypes.LIST_START;
            }
          // fall through
          case 92: break;
          case 38:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [295] { encounterOpenSegment();"+ZZ_NL+"                                                        return YappingTypes.MAP_START; }");
            { encounterOpenSegment();
                                                        return YappingTypes.MAP_START;
            }
          // fall through
          case 93: break;
          case 39:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [451] { return YappingTypes.JBODY; }");
            { return YappingTypes.JBODY;
            }
          // fall through
          case 94: break;
          case 40:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [456] { yybegin(PENDING_JSCOPE); return YappingTypes.WHITESPACE; }");
            { yybegin(PENDING_JSCOPE); return YappingTypes.WHITESPACE;
            }
          // fall through
          case 95: break;
          case 41:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [455] { yybegin(PENDING_JSCOPE); return YappingTypes.COMMENT; }");
            { yybegin(PENDING_JSCOPE); return YappingTypes.COMMENT;
            }
          // fall through
          case 96: break;
          case 42:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [453] { yybegin(AFTER_JSCOPE); return YappingTypes.DOT; }");
            { yybegin(AFTER_JSCOPE); return YappingTypes.DOT;
            }
          // fall through
          case 97: break;
          case 43:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [428] { endCurrentPath();"+ZZ_NL+"                                                        return YappingTypes.SLASH; }");
            { endCurrentPath();
                                                        return YappingTypes.SLASH;
            }
          // fall through
          case 98: break;
          case 44:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [491] { yybegin(BEFORE_JSCOPE); return YappingTypes.JNAME; }");
            { yybegin(BEFORE_JSCOPE); return YappingTypes.JNAME;
            }
          // fall through
          case 99: break;
          case 45:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [461] { return YappingTypes.YBODY; }");
            { return YappingTypes.YBODY;
            }
          // fall through
          case 100: break;
          case 46:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [466] { yybegin(PENDING_YSCOPE); return YappingTypes.WHITESPACE; }");
            { yybegin(PENDING_YSCOPE); return YappingTypes.WHITESPACE;
            }
          // fall through
          case 101: break;
          case 47:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [465] { yybegin(PENDING_YSCOPE); return YappingTypes.COMMENT; }");
            { yybegin(PENDING_YSCOPE); return YappingTypes.COMMENT;
            }
          // fall through
          case 102: break;
          case 48:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [463] { yybegin(AFTER_YSCOPE); return YappingTypes.DOT; }");
            { yybegin(AFTER_YSCOPE); return YappingTypes.DOT;
            }
          // fall through
          case 103: break;
          case 49:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [460] { return YappingTypes.NATURAL; }");
            { return YappingTypes.NATURAL;
            }
          // fall through
          case 104: break;
          case 50:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [495] { yybegin(BEFORE_YSCOPE); return YappingTypes.YNAME; }");
            { yybegin(BEFORE_YSCOPE); return YappingTypes.YNAME;
            }
          // fall through
          case 105: break;
          case 51:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [496] { yybegin(BEFORE_YSCOPE); return YappingTypes.NATURAL; }");
            { yybegin(BEFORE_YSCOPE); return YappingTypes.NATURAL;
            }
          // fall through
          case 106: break;
          case 52:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [337] { endCurrentPath();"+ZZ_NL+"                                                        return YappingTypes.TRANSITION_SEP_R; }");
            { endCurrentPath();
                                                        return YappingTypes.TRANSITION_SEP_R;
            }
          // fall through
          case 107: break;
          case 53:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [333] { endCurrentPath();"+ZZ_NL+"                                                        return YappingTypes.TRANSITION_SEP_L; }");
            { endCurrentPath();
                                                        return YappingTypes.TRANSITION_SEP_L;
            }
          // fall through
          case 108: break;
          case 54:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [438] { yypushback(2);"+ZZ_NL+"          return YappingTypes.FNAME; }");
            { yypushback(2);
          return YappingTypes.FNAME;
            }
          // fall through
          case 109: break;
          case 55:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"char: "+yychar+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [477] { yypushback(2);"+ZZ_NL+"          yybegin(BEFORE_SLASH);"+ZZ_NL+"          return YappingTypes.FNAME; }");
            { yypushback(2);
          yybegin(BEFORE_SLASH);
          return YappingTypes.FNAME;
            }
          // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java YappingLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        YappingLexer scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new YappingLexer(reader);
          do {
            System.out.println(scanner.advance());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
