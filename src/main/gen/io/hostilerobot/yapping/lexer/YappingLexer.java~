// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Yapping.flex

package io.hostilerobot.yapping.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;

import io.hostilerobot.yapping.parser.YappingTypes;import java.nio.file.Path;import java.util.ArrayDeque;import java.util.Deque;import com.intellij.lexer.FlexLexer;


class YappingLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LITERAL = 2;
  public static final int REGEX = 4;
  public static final int REGEX_CLASS = 6;
  public static final int BEFORE_SLASH = 8;
  public static final int AFTER_SLASH = 10;
  public static final int PENDING_SLASH = 12;
  public static final int BEFORE_JSCOPE = 14;
  public static final int AFTER_JSCOPE = 16;
  public static final int PENDING_JSCOPE = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000"+
    "\1\u5100\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00\4\u0100\1\u5500"+
    "\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00"+
    "\1\u5900\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\42\u1f00"+
    "\1\u0100\1\u5e00\1\u5f00\11\u1f00\1\u6000\24\u1f00\1\u6100\1\u6200"+
    "\1\u1f00\1\u6300\1\u6400\1\u6500\1\u6600\2\u1f00\1\u6700\5\u1f00"+
    "\1\u6800\1\u6900\1\u6a00\5\u1f00\1\u6b00\1\u6c00\2\u1f00\1\u6d00"+
    "\1\u1f00\1\u6e00\14\u1f00\1\u6f00\4\u1f00\246\u0100\1\u7000\20\u0100"+
    "\1\u7100\1\u7200\25\u0100\1\u7300\34\u0100\1\u7400\14\u1f00\2\u0100"+
    "\1\u7500\5\u1f00\23\u0100\1\u7600\u0aec\u1f00\1\u7700\1\u7800\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\12"+
    "\1\14\1\15\1\12\1\16\1\17\1\20\1\21\1\22"+
    "\12\23\1\24\1\25\1\26\1\27\1\30\1\12\1\31"+
    "\32\32\1\33\1\34\1\35\1\12\1\32\1\36\32\32"+
    "\1\37\1\12\1\40\1\12\41\0\2\3\4\32\4\3"+
    "\1\32\2\3\1\0\7\3\1\32\4\3\1\32\5\3"+
    "\27\32\1\3\37\32\1\3\u01ca\32\4\3\14\32\16\3"+
    "\5\32\7\3\1\32\1\3\1\32\21\3\160\0\5\32"+
    "\1\3\2\32\2\3\4\32\1\3\1\32\6\3\1\32"+
    "\1\3\3\32\1\3\1\32\1\3\24\32\1\3\123\32"+
    "\1\3\213\32\1\3\5\0\2\3\246\32\1\3\46\32"+
    "\2\3\1\32\6\3\51\32\6\3\1\32\1\3\55\0"+
    "\1\3\1\0\1\3\2\0\1\3\2\0\1\3\1\0"+
    "\10\3\33\32\4\3\4\32\15\3\6\0\5\3\1\32"+
    "\4\3\13\0\1\3\1\0\3\3\53\32\37\0\4\3"+
    "\2\32\1\0\143\32\1\3\1\32\10\0\1\3\6\0"+
    "\2\32\2\0\1\3\4\0\2\32\12\0\3\32\2\3"+
    "\1\32\17\3\1\0\1\32\1\0\36\32\33\0\2\3"+
    "\131\32\13\0\1\32\16\3\12\0\41\32\11\0\2\32"+
    "\4\3\1\32\2\3\1\0\30\32\4\0\1\32\11\0"+
    "\1\32\3\0\1\32\5\0\22\3\31\32\3\0\4\3"+
    "\13\32\65\3\25\32\1\3\22\32\13\3\61\0\66\32"+
    "\3\0\1\32\22\0\1\32\7\0\12\32\2\0\2\3"+
    "\12\0\1\3\20\32\3\0\1\3\10\32\2\3\2\32"+
    "\2\3\26\32\1\3\7\32\1\3\1\32\3\3\4\32"+
    "\2\3\1\0\1\32\7\0\2\3\2\0\2\3\3\0"+
    "\1\32\10\3\1\0\4\3\2\32\1\3\3\32\2\0"+
    "\2\3\12\0\4\32\7\3\2\32\1\3\1\0\2\3"+
    "\3\0\1\3\6\32\4\3\2\32\2\3\26\32\1\3"+
    "\7\32\1\3\2\32\1\3\2\32\1\3\2\32\2\3"+
    "\1\0\1\3\5\0\4\3\2\0\2\3\3\0\3\3"+
    "\1\0\7\3\4\32\1\3\1\32\7\3\14\0\3\32"+
    "\1\0\13\3\3\0\1\3\11\32\1\3\3\32\1\3"+
    "\26\32\1\3\7\32\1\3\2\32\1\3\5\32\2\3"+
    "\1\0\1\32\10\0\1\3\3\0\1\3\3\0\2\3"+
    "\1\32\17\3\2\32\2\0\2\3\12\0\1\3\1\32"+
    "\7\3\1\32\6\0\1\3\3\0\1\3\10\32\2\3"+
    "\2\32\2\3\26\32\1\3\7\32\1\3\2\32\1\3"+
    "\5\32\2\3\1\0\1\32\7\0\2\3\2\0\2\3"+
    "\3\0\7\3\3\0\4\3\2\32\1\3\3\32\2\0"+
    "\2\3\12\0\1\3\1\32\20\3\1\0\1\32\1\3"+
    "\6\32\3\3\3\32\1\3\4\32\3\3\2\32\1\3"+
    "\1\32\1\3\2\32\3\3\2\32\3\3\3\32\3\3"+
    "\14\32\4\3\5\0\3\3\3\0\1\3\4\0\2\3"+
    "\1\32\6\3\1\0\16\3\12\0\11\3\1\32\6\3"+
    "\5\0\10\32\1\3\3\32\1\3\27\32\1\3\20\32"+
    "\3\3\1\32\7\0\1\3\3\0\1\3\4\0\7\3"+
    "\2\0\1\3\3\32\5\3\2\32\2\0\2\3\12\0"+
    "\20\3\1\32\3\0\1\3\10\32\1\3\3\32\1\3"+
    "\27\32\1\3\12\32\1\3\5\32\2\3\1\0\1\32"+
    "\7\0\1\3\3\0\1\3\4\0\7\3\2\0\7\3"+
    "\1\32\1\3\2\32\2\0\2\3\12\0\1\3\2\32"+
    "\15\3\4\0\11\32\1\3\3\32\1\3\51\32\2\0"+
    "\1\32\7\0\1\3\3\0\1\3\4\0\1\32\5\3"+
    "\3\32\1\0\7\3\3\32\2\0\2\3\12\0\12\3"+
    "\6\32\1\3\3\0\1\3\22\32\3\3\30\32\1\3"+
    "\11\32\1\3\1\32\2\3\7\32\3\3\1\0\4\3"+
    "\6\0\1\3\1\0\1\3\10\0\6\3\12\0\2\3"+
    "\2\0\15\3\60\32\1\0\2\32\7\0\4\3\10\32"+
    "\10\0\1\3\12\0\47\3\2\32\1\3\1\32\1\3"+
    "\5\32\1\3\30\32\1\3\1\32\1\3\12\32\1\0"+
    "\2\32\11\0\1\32\2\3\5\32\1\3\1\32\1\3"+
    "\6\0\2\3\12\0\2\3\4\32\40\3\1\32\27\3"+
    "\2\0\6\3\12\0\13\3\1\0\1\3\1\0\1\3"+
    "\1\0\4\3\2\0\10\32\1\3\44\32\4\3\24\0"+
    "\1\3\2\0\5\32\13\0\1\3\44\0\11\3\1\0"+
    "\71\3\53\32\24\0\1\32\12\0\6\3\6\32\4\0"+
    "\4\32\3\0\1\32\3\0\2\32\7\0\3\32\4\0"+
    "\15\32\14\0\1\32\17\0\2\3\46\32\1\3\1\32"+
    "\5\3\1\32\2\3\53\32\1\3\115\32\1\3\4\32"+
    "\2\3\7\32\1\3\1\32\1\3\4\32\2\3\51\32"+
    "\1\3\4\32\2\3\41\32\1\3\4\32\2\3\7\32"+
    "\1\3\1\32\1\3\4\32\2\3\17\32\1\3\71\32"+
    "\1\3\4\32\2\3\103\32\2\3\3\0\40\3\20\32"+
    "\20\3\126\32\2\3\6\32\3\3\u016c\32\2\3\21\32"+
    "\1\3\32\32\5\3\113\32\3\3\13\32\7\3\15\32"+
    "\1\3\4\32\3\0\13\3\22\32\3\0\13\3\22\32"+
    "\2\0\14\3\15\32\1\3\3\32\1\3\2\0\14\3"+
    "\64\32\40\0\3\3\1\32\3\3\2\32\1\0\2\3"+
    "\12\0\41\3\4\0\1\3\12\0\6\3\131\32\7\3"+
    "\5\32\2\0\42\32\1\0\1\32\5\3\106\32\12\3"+
    "\37\32\1\3\14\0\4\3\14\0\12\3\12\0\36\32"+
    "\2\3\5\32\13\3\54\32\4\3\32\32\6\3\12\0"+
    "\46\3\27\32\5\0\4\3\65\32\12\0\1\3\35\0"+
    "\2\3\13\0\6\3\12\0\15\3\1\32\10\3\16\0"+
    "\1\3\2\0\77\3\5\0\57\32\21\0\7\32\4\3"+
    "\12\0\21\3\11\0\14\3\3\0\36\32\15\0\2\32"+
    "\12\0\54\32\16\0\14\3\44\32\24\0\10\3\12\0"+
    "\3\3\3\32\12\0\44\32\2\3\11\32\7\3\53\32"+
    "\2\3\3\32\20\3\3\0\1\3\25\0\4\32\1\0"+
    "\6\32\1\0\2\32\3\0\1\32\5\3\300\32\72\0"+
    "\1\3\5\0\26\32\2\3\6\32\2\3\46\32\2\3"+
    "\6\32\2\3\10\32\1\3\1\32\1\3\1\32\1\3"+
    "\1\32\1\3\37\32\2\3\65\32\1\3\7\32\1\3"+
    "\1\32\3\3\3\32\1\3\7\32\3\3\4\32\2\3"+
    "\6\32\4\3\15\32\5\3\3\32\1\3\7\32\16\3"+
    "\5\0\32\3\5\0\20\3\2\32\23\3\1\32\13\3"+
    "\5\0\1\3\12\0\1\3\1\32\15\3\1\32\20\3"+
    "\15\32\3\3\40\32\20\3\15\0\4\3\1\0\3\3"+
    "\14\0\21\3\1\32\4\3\1\32\2\3\12\32\1\3"+
    "\1\32\3\3\5\32\6\3\1\32\1\3\1\32\1\3"+
    "\1\32\1\3\4\32\1\3\13\32\2\3\4\32\5\3"+
    "\5\32\4\3\1\32\21\3\51\32\u0177\3\57\32\1\3"+
    "\57\32\1\3\205\32\6\3\4\32\3\0\2\32\14\3"+
    "\46\32\1\3\1\32\5\3\1\32\2\3\70\32\7\3"+
    "\1\32\17\3\1\0\27\32\11\3\7\32\1\3\7\32"+
    "\1\3\7\32\1\3\7\32\1\3\7\32\1\3\7\32"+
    "\1\3\7\32\1\3\7\32\1\3\40\0\57\3\1\32"+
    "\325\3\3\32\31\3\11\32\6\0\1\3\5\32\2\3"+
    "\5\32\4\3\126\32\2\3\2\0\2\3\3\32\1\3"+
    "\132\32\1\3\4\32\5\3\53\32\1\3\136\32\21\3"+
    "\40\32\60\3\320\32\100\3\375\32\3\3\215\32\103\3"+
    "\56\32\2\3\15\32\3\3\20\32\12\0\2\32\24\3"+
    "\57\32\1\0\4\3\12\0\1\3\37\32\2\0\120\32"+
    "\2\0\45\3\11\32\2\3\147\32\2\3\65\32\2\3"+
    "\11\32\52\3\15\32\1\0\3\32\1\0\4\32\1\0"+
    "\27\32\5\0\4\3\1\0\13\3\1\32\7\3\64\32"+
    "\14\3\2\0\62\32\22\0\12\3\12\0\6\3\22\0"+
    "\6\32\3\3\1\32\1\3\2\32\13\0\34\32\10\0"+
    "\2\3\27\32\15\0\14\3\35\32\3\3\4\0\57\32"+
    "\16\0\16\3\1\32\12\0\6\3\5\32\1\0\12\32"+
    "\12\0\5\32\1\3\51\32\16\0\11\3\3\32\1\0"+
    "\10\32\2\0\2\3\12\0\6\3\27\32\3\3\1\32"+
    "\3\0\62\32\1\0\1\32\3\0\2\32\2\0\5\32"+
    "\2\0\1\32\1\0\1\32\30\3\3\32\2\3\13\32"+
    "\5\0\2\3\3\32\2\0\12\3\6\32\2\3\6\32"+
    "\2\3\6\32\11\3\7\32\1\3\7\32\1\3\53\32"+
    "\1\3\16\32\6\3\163\32\10\0\1\3\2\0\2\3"+
    "\12\0\6\3\244\32\14\3\27\32\4\3\61\32\4\3"+
    "\156\32\2\3\152\32\46\3\7\32\14\3\5\32\5\3"+
    "\1\32\1\0\12\32\1\3\15\32\1\3\5\32\1\3"+
    "\1\32\1\3\2\32\1\3\2\32\1\3\154\32\41\3"+
    "\153\32\22\3\100\32\2\3\66\32\50\3\15\32\3\3"+
    "\20\0\20\3\20\0\3\3\2\32\30\3\3\32\31\3"+
    "\1\32\6\3\5\32\1\3\207\32\2\3\1\0\4\3"+
    "\1\32\13\3\12\0\7\3\32\32\4\3\1\32\1\3"+
    "\32\32\13\3\131\32\3\3\6\32\2\3\6\32\2\3"+
    "\6\32\2\3\3\32\3\3\2\32\3\3\2\32\22\3"+
    "\3\0\4\3\14\32\1\3\32\32\1\3\23\32\1\3"+
    "\2\32\1\3\17\32\2\3\16\32\42\3\173\32\105\3"+
    "\65\32\210\3\1\0\202\3\35\32\3\3\61\32\17\3"+
    "\1\0\37\3\40\32\15\3\36\32\5\3\46\32\5\0"+
    "\5\3\36\32\2\3\44\32\4\3\10\32\1\3\5\32"+
    "\52\3\236\32\2\3\12\0\6\3\44\32\4\3\44\32"+
    "\4\3\50\32\10\3\64\32\234\3\67\32\11\3\26\32"+
    "\12\3\10\32\230\3\6\32\2\3\1\32\1\3\54\32"+
    "\1\3\2\32\3\3\1\32\2\3\27\32\12\3\27\32"+
    "\11\3\37\32\101\3\23\32\1\3\2\32\12\3\26\32"+
    "\12\3\32\32\106\3\70\32\6\3\2\32\100\3\1\32"+
    "\3\0\1\3\2\0\5\3\4\0\4\32\1\3\3\32"+
    "\1\3\35\32\2\3\3\0\4\3\1\0\40\3\35\32"+
    "\3\3\35\32\43\3\10\32\1\3\34\32\2\0\31\3"+
    "\66\32\12\3\26\32\12\3\23\32\15\3\22\32\156\3"+
    "\111\32\67\3\63\32\15\3\63\32\15\3\44\32\4\0"+
    "\10\3\12\0\u0146\3\52\32\1\3\2\0\3\3\2\32"+
    "\116\3\35\32\12\3\1\32\10\3\26\32\13\0\137\3"+
    "\25\32\33\3\27\32\11\3\3\0\65\32\17\0\37\3"+
    "\12\0\17\3\4\0\55\32\13\0\2\3\1\0\17\3"+
    "\1\0\2\3\31\32\7\3\12\0\6\3\3\0\44\32"+
    "\16\0\1\3\12\0\4\3\1\32\2\0\1\32\10\3"+
    "\43\32\1\0\2\3\1\32\11\3\3\0\60\32\16\0"+
    "\4\32\4\3\4\0\1\3\14\0\1\32\1\3\1\32"+
    "\43\3\22\32\1\3\31\32\14\0\6\3\1\0\101\3"+
    "\7\32\1\3\1\32\1\3\4\32\1\3\17\32\1\3"+
    "\12\32\7\3\57\32\14\0\5\3\12\0\6\3\4\0"+
    "\1\3\10\32\2\3\2\32\2\3\26\32\1\3\7\32"+
    "\1\3\2\32\1\3\5\32\1\3\2\0\1\32\7\0"+
    "\2\3\2\0\2\3\3\0\2\3\1\32\6\3\1\0"+
    "\5\3\5\32\2\0\2\3\7\0\3\3\5\0\213\3"+
    "\65\32\22\0\4\32\5\3\12\0\4\3\1\0\3\32"+
    "\36\3\60\32\24\0\2\32\1\3\1\32\10\3\12\0"+
    "\246\3\57\32\7\0\2\3\11\0\27\3\4\32\2\0"+
    "\42\3\60\32\21\0\3\3\1\32\13\3\12\0\46\3"+
    "\53\32\15\0\1\32\7\3\12\0\66\3\33\32\2\3"+
    "\17\0\4\3\12\0\306\3\54\32\17\0\145\3\100\32"+
    "\12\0\25\3\10\32\2\3\1\32\2\3\10\32\1\3"+
    "\2\32\1\3\30\32\6\0\1\3\2\0\2\3\4\0"+
    "\1\32\1\0\1\32\2\0\14\3\12\0\106\3\10\32"+
    "\2\3\47\32\7\0\2\3\7\0\1\32\1\3\1\32"+
    "\1\0\33\3\1\32\12\0\50\32\7\0\1\32\4\0"+
    "\10\3\1\0\10\3\1\32\13\0\56\32\20\0\3\3"+
    "\1\32\42\3\71\32\7\3\11\32\1\3\45\32\10\0"+
    "\1\3\10\0\1\32\17\3\12\0\30\3\36\32\2\3"+
    "\26\0\1\3\16\0\111\3\7\32\1\3\2\32\1\3"+
    "\46\32\6\0\3\3\1\0\1\3\2\0\1\3\7\0"+
    "\1\32\1\0\10\3\12\0\6\3\6\32\1\3\2\32"+
    "\1\3\40\32\5\0\1\3\2\0\1\3\5\0\1\32"+
    "\7\3\12\0\u0136\3\23\32\4\0\271\3\1\32\54\3"+
    "\4\32\37\3\232\32\146\3\157\32\21\3\304\32\274\3"+
    "\57\32\1\3\11\0\307\3\107\32\271\3\71\32\7\3"+
    "\37\32\1\3\12\0\146\3\36\32\2\3\5\0\13\3"+
    "\60\32\7\0\11\3\4\32\14\3\12\0\11\3\25\32"+
    "\5\3\23\32\260\3\100\32\200\3\113\32\4\3\1\0"+
    "\1\32\67\0\7\3\4\0\15\32\100\3\2\32\1\3"+
    "\1\32\1\0\13\3\2\0\16\3\370\32\10\3\326\32"+
    "\52\3\11\32\367\3\37\32\61\3\3\32\21\3\4\32"+
    "\10\3\u018c\32\4\3\153\32\5\3\15\32\3\3\11\32"+
    "\7\3\12\32\3\3\2\0\1\3\4\0\301\3\5\0"+
    "\3\3\26\0\2\3\7\0\36\3\4\0\224\3\3\0"+
    "\273\3\125\32\1\3\107\32\1\3\2\32\2\3\1\32"+
    "\2\3\2\32\2\3\4\32\1\3\14\32\1\3\1\32"+
    "\1\3\7\32\1\3\101\32\1\3\4\32\2\3\10\32"+
    "\1\3\7\32\1\3\34\32\1\3\4\32\1\3\5\32"+
    "\1\3\1\32\3\3\7\32\1\3\u0154\32\2\3\31\32"+
    "\1\3\31\32\1\3\37\32\1\3\31\32\1\3\37\32"+
    "\1\3\31\32\1\3\37\32\1\3\31\32\1\3\37\32"+
    "\1\3\31\32\1\3\10\32\2\3\151\0\4\3\62\0"+
    "\10\3\1\0\16\3\1\0\26\3\5\0\1\3\17\0"+
    "\120\3\7\0\1\3\21\0\2\3\7\0\1\3\2\0"+
    "\1\3\5\0\325\3\55\32\3\3\7\0\7\32\2\3"+
    "\12\0\4\3\1\32\u0171\3\54\32\16\0\5\3\306\32"+
    "\13\3\7\0\51\3\104\32\7\0\1\32\4\3\12\0"+
    "\u0156\3\1\32\117\3\4\32\1\3\33\32\1\3\2\32"+
    "\1\3\1\32\2\3\1\32\1\3\12\32\1\3\4\32"+
    "\1\3\1\32\1\3\1\32\6\3\1\32\4\3\1\32"+
    "\1\3\1\32\1\3\1\32\1\3\3\32\1\3\2\32"+
    "\1\3\1\32\2\3\1\32\1\3\1\32\1\3\1\32"+
    "\1\3\1\32\1\3\1\32\1\3\2\32\1\3\1\32"+
    "\2\3\4\32\1\3\7\32\1\3\4\32\1\3\4\32"+
    "\1\3\1\32\1\3\12\32\1\3\21\32\5\3\3\32"+
    "\1\3\5\32\1\3\21\32\u0134\3\12\0\6\3\336\32"+
    "\42\3\65\32\13\3\336\32\2\3\u0182\32\16\3\u0131\32"+
    "\37\3\36\32\342\3\113\32\266\3\1\0\36\3\140\0"+
    "\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30976];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\3\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\6\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\6\1\27\1\31\1\6\1\32\1\27"+
    "\1\33\2\34\1\35\1\33\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\2\51"+
    "\1\52\1\53\1\54\2\5\1\55\1\56\1\27\2\35"+
    "\2\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[73];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347"+
    "\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u016b\0\u016b"+
    "\0\u01ce\0\u016b\0\u016b\0\u016b\0\u016b\0\u016b\0\u016b\0\u01ef"+
    "\0\u016b\0\u01ad\0\u016b\0\u0210\0\u016b\0\u016b\0\u016b\0\u016b"+
    "\0\u016b\0\u016b\0\u016b\0\u0231\0\u016b\0\u0252\0\u0273\0\u016b"+
    "\0\u0294\0\u016b\0\u02b5\0\u02d6\0\u016b\0\u02f7\0\u0318\0\u0339"+
    "\0\u016b\0\u035a\0\u016b\0\u037b\0\u016b\0\u016b\0\u039c\0\u016b"+
    "\0\u016b\0\u016b\0\u03bd\0\u016b\0\u03de\0\u03ff\0\u016b\0\u0420"+
    "\0\u016b\0\u0441\0\u016b\0\u016b\0\u016b\0\u016b\0\u0462\0\u016b"+
    "\0\u0483";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[73];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\2\14\1\13\1\15\1\16\1\17\1\20\1\21"+
    "\2\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\22\1\32\1\33\1\22\1\34\1\35\1\22\1\36"+
    "\1\13\1\37\1\22\1\40\1\41\1\42\1\43\7\44"+
    "\1\45\24\44\1\46\4\44\33\47\1\50\1\51\1\47"+
    "\1\52\2\47\34\53\1\46\1\41\3\53\1\54\2\55"+
    "\1\54\1\56\1\55\1\17\1\20\1\57\3\54\1\24"+
    "\1\25\1\54\1\27\1\60\1\54\1\61\1\54\1\33"+
    "\1\22\1\34\1\35\1\22\1\36\1\54\1\37\1\54"+
    "\1\40\1\41\1\42\1\43\1\62\2\14\1\62\1\15"+
    "\1\14\1\22\1\20\1\21\3\62\1\24\1\25\1\62"+
    "\1\22\2\62\1\63\1\62\6\22\1\62\1\37\1\62"+
    "\1\40\1\41\1\42\1\43\1\64\2\14\1\64\1\15"+
    "\1\14\1\17\1\65\1\21\2\22\1\23\1\66\1\25"+
    "\1\26\1\27\1\30\1\22\1\61\1\67\1\33\1\22"+
    "\1\34\1\35\1\22\1\36\1\64\1\70\1\22\1\40"+
    "\1\71\1\72\1\43\1\73\2\74\1\22\1\75\1\74"+
    "\1\17\1\20\1\76\1\73\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\77\1\22\1\73\1\33\1\22"+
    "\1\34\1\35\1\22\1\36\1\73\1\37\1\22\1\40"+
    "\1\41\1\42\1\43\1\22\2\14\1\22\1\15\1\14"+
    "\1\22\1\20\1\21\1\100\2\22\1\24\1\25\14\22"+
    "\1\100\1\37\1\22\1\40\1\41\1\42\1\43\1\64"+
    "\2\14\1\64\1\15\1\14\1\17\1\65\1\21\2\22"+
    "\1\23\1\66\1\25\1\26\1\27\1\30\1\77\1\22"+
    "\1\67\1\33\1\22\1\34\1\35\1\22\1\36\1\64"+
    "\1\70\1\22\1\40\1\71\1\72\1\43\1\13\2\0"+
    "\1\13\1\0\1\13\15\0\1\13\6\0\1\13\51\0"+
    "\1\14\36\0\1\32\2\0\1\32\1\0\1\32\15\0"+
    "\1\32\6\0\1\32\6\0\2\21\1\101\1\21\1\102"+
    "\34\21\30\0\1\103\30\0\1\104\20\0\7\44\1\0"+
    "\24\44\1\0\4\44\41\105\33\47\2\0\1\47\1\0"+
    "\2\47\33\105\1\41\2\105\1\41\2\105\34\53\2\0"+
    "\3\53\1\54\2\0\1\54\5\0\3\54\2\0\1\54"+
    "\1\0\2\54\1\0\1\54\6\0\1\54\1\0\1\54"+
    "\6\0\1\55\36\0\2\57\1\106\1\57\1\107\34\57"+
    "\1\54\2\0\1\54\5\0\3\54\2\0\1\54\1\0"+
    "\2\54\1\0\1\54\4\0\1\103\1\0\1\54\1\0"+
    "\1\54\4\0\1\62\2\0\1\62\5\0\3\62\2\0"+
    "\1\62\1\0\2\62\1\0\1\62\6\0\1\62\1\0"+
    "\1\62\4\0\1\64\2\0\1\64\1\0\1\64\15\0"+
    "\1\64\6\0\1\64\31\0\1\67\15\0\1\73\10\0"+
    "\1\73\11\0\1\73\6\0\1\73\10\0\1\74\36\0"+
    "\2\76\1\110\1\76\1\111\34\76\1\100\10\0\1\100"+
    "\11\0\1\100\6\0\1\100\10\0\1\101\40\0\1\106"+
    "\40\0\1\110\36\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1188];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\1\1\11\2\1\2\11\1\1\6\11\1\1"+
    "\1\11\1\1\1\11\1\1\7\11\1\1\1\11\2\1"+
    "\1\11\1\1\1\11\2\1\1\11\3\1\1\11\1\1"+
    "\1\11\1\1\2\11\1\1\3\11\1\1\1\11\2\1"+
    "\1\11\1\1\1\11\1\1\4\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[73];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

enum PathContext{
      FILE(AFTER_SLASH, BEFORE_SLASH),
      JAVA(AFTER_JSCOPE, BEFORE_JSCOPE),
      YAPPING(YYINITIAL, YYINITIAL);
      private final int fallback;
      private final int initialState;
      PathContext(int initialState, int fallback) {
          this.initialState = initialState;
          this.fallback = fallback;
      }
}
// we want to handle java paths !com.user.Plugin
// different from file paths @file/user/pugin.yap
// different from YAPPING paths { ... }.my-value.3.length
//Deque<Integer> CONTEXT = new ArrayDeque<>();
private Deque<PathContext> context = new ArrayDeque<>();
{
  // top level is all yapping
  // this item should be here throughout all lexing
  context.push(PathContext.YAPPING);
}

private int getCurrentFallback() {
    return context.peek().fallback;
}
// file path interrupts the current segment and starts a new one that's file
// @asdf!asdf asdf!asdf !asdf !asdf
private void startNewFilePath() {
    endCurrentPath();
    context.push(PathContext.FILE);
    yybegin(PathContext.FILE.initialState);
}
private void startNewJavaPath() {
    endCurrentPath();
    context.push(PathContext.JAVA);
    yybegin(PathContext.JAVA.initialState);
}

// new path that starts with a regex
private void startNewYappingPathRegexStart() {
    endCurrentPath();
    yybegin(REGEX);
}
// new path that starts with a literal
// !asdf "asdf"
//       ^
private void startNewYappingPathLiteralStart() {
    endCurrentPath();
    yybegin(LITERAL);
}

// open parentheses on a new yapping path, e.g. [ ( {
// asdf ( .. )
//      ^
// !asdf ( .. )
//       ^
private void startNewYappingPathOpenStart() {
    startNewYappingPath();
    context.push(PathContext.YAPPING);
}

// asdf asdf
//      ^
// !asdf asdf
//       ^
// !asdf=asdf
//      ^
// @asdf, asdf
//      ^
private void startNewYappingPath() {
    endCurrentPath();
    yybegin(YYINITIAL);
}

// ends the current segment
private void endCurrentPath() {
    // encounter a start of a new yapping segment after PENDING
    if(context.size() > 1 && context.peek() != PathContext.YAPPING) {
        // !asdf.asdf asdf
        // [F, Y]     [Y]
        context.pop();
        if(context.peek() != PathContext.YAPPING) {
            // should never happen but we check anyway
            throw new IllegalStateException("Expected YAPPING instead found " + context.peek());
        }
    }
}

private void openYappingSegment() {
    // encounter a (, {, or [ while in a segment
    context.push(PathContext.YAPPING);
    if(yystate() != PathContext.YAPPING.initialState) {
        yybegin(PathContext.YAPPING.initialState);
    }
}
private void closeCurrentSegment() {
    // encounter ), ], or }
    if(context.size() > 1 && context.peek() == PathContext.YAPPING) {
        context.pop();
        // !sadf[asdf]
        //           ^
        // sadf[[asdf]]
        //           ^^
        PathContext contextResult = context.peek();
        yybegin(contextResult.fallback);
    } else if(context.size() > 2 && context.peek() != PathContext.YAPPING) {
        // !sa/df[!asdf]as/df
        //             ^
        context.pop(); // stop the current java or file path
        // context.size() > 1
        if(context.peek() != PathContext.YAPPING) {
            // should never happen but we check anyway
            throw new IllegalStateException("Expected YAPPING instead found " + context.peek());
        }
        // remove this context - it corresponds to the opening brace which has now just ended
        context.pop();
        // context.size() > 0

        PathContext contextResult = context.peek();
        // we return to this context
        yybegin(contextResult.fallback);
    } else {
        // will only occur if we have a sequence with
        // sadf] or !asdf]
        if(context.size() > 1) {
            context.pop();
        }
        yybegin(PathContext.YAPPING.fallback);
    }
    // todo - should we throw if we encounter mismatched segments?
    //        ex: asdf)asdf
    //        currently we just fall back to YAPPING and let the parser deal with it
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  YappingLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case LITERAL: {
              throw new Error("EOF while parsing string");
            }  // fall though
            case 74: break;
            case REGEX: {
              throw new Error("EOF while parsing `regex`");
            }  // fall though
            case 75: break;
            case REGEX_CLASS: {
              throw new Error("EOF while parsing `regex`");
            }  // fall though
            case 76: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return YappingTypes.YNAME;
            }
          // fall through
          case 47: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 48: break;
          case 3:
            { startNewJavaPath();
                                                        return YappingTypes.JPATH_START;
            }
          // fall through
          case 49: break;
          case 4:
            { yybegin(LITERAL);
            }
          // fall through
          case 50: break;
          case 5:
            { return YappingTypes.COMMENT;
            }
          // fall through
          case 51: break;
          case 6:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 52: break;
          case 7:
            { startNewYappingPath();
                                                        return YappingTypes.AND;
            }
          // fall through
          case 53: break;
          case 8:
            { openYappingSegment();
                                                        return YappingTypes.PRECEDENCE_START;
            }
          // fall through
          case 54: break;
          case 9:
            { closeCurrentSegment();
                                                        return YappingTypes.PRECEDENCE_END;
            }
          // fall through
          case 55: break;
          case 10:
            { startNewYappingPath();
                                                        return YappingTypes.PLUS;
            }
          // fall through
          case 56: break;
          case 11:
            { startNewYappingPath();
                                                        return YappingTypes.LIST_SEP;
            }
          // fall through
          case 57: break;
          case 12:
            { startNewYappingPath();
                                                        return YappingTypes.MINUS;
            }
          // fall through
          case 58: break;
          case 13:
            { return YappingTypes.DOT;
            }
          // fall through
          case 59: break;
          case 14:
            { return YappingTypes.YBODY;
            }
          // fall through
          case 60: break;
          case 15:
            { startNewYappingPath();
                                                        return YappingTypes.PROPERTY_SEP;
            }
          // fall through
          case 61: break;
          case 16:
            { startNewYappingPath();
                                                        return YappingTypes.PAIR_SEP;
            }
          // fall through
          case 62: break;
          case 17:
            { /* fall back to BEFORE_SLASH when we're done parsing regex or literal */
                                                        startNewFilePath();
                                                        return YappingTypes.FPATH_START;
            }
          // fall through
          case 63: break;
          case 18:
            { openYappingSegment();
                                                        return YappingTypes.LIST_START;
            }
          // fall through
          case 64: break;
          case 19:
            { closeCurrentSegment();
                                                        return YappingTypes.LIST_END;
            }
          // fall through
          case 65: break;
          case 20:
            { yybegin(REGEX);
            }
          // fall through
          case 66: break;
          case 21:
            { openYappingSegment();
                                                        return YappingTypes.MAP_START;
            }
          // fall through
          case 67: break;
          case 22:
            { closeCurrentSegment();
                                                        return YappingTypes.MAP_END;
            }
          // fall through
          case 68: break;
          case 23:
            { 
            }
          // fall through
          case 69: break;
          case 24:
            { yybegin(getCurrentFallback());
                                                        return YappingTypes.LITERAL;
            }
          // fall through
          case 70: break;
          case 25:
            { yybegin(REGEX_CLASS);
            }
          // fall through
          case 71: break;
          case 26:
            { yybegin(getCurrentFallback()); return YappingTypes.REGEX;
            }
          // fall through
          case 72: break;
          case 27:
            { return YappingTypes.FNAME;
            }
          // fall through
          case 73: break;
          case 28:
            { yybegin(PENDING_SLASH); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 74: break;
          case 29:
            { yybegin(PENDING_SLASH); return YappingTypes.COMMENT;
            }
          // fall through
          case 75: break;
          case 30:
            { yybegin(AFTER_SLASH); return YappingTypes.SLASH;
            }
          // fall through
          case 76: break;
          case 31:
            { yybegin(BEFORE_SLASH); return YappingTypes.FNAME;
            }
          // fall through
          case 77: break;
          case 32:
            { return YappingTypes.SLASH;
            }
          // fall through
          case 78: break;
          case 33:
            { startNewYappingPath();
                                                        return YappingTypes.YNAME;
            }
          // fall through
          case 79: break;
          case 34:
            { // we are encountering a new literal
                                                        startNewYappingPathLiteralStart();
            }
          // fall through
          case 80: break;
          case 35:
            { startNewYappingPathOpenStart();
                                                        return YappingTypes.PRECEDENCE_START;
            }
          // fall through
          case 81: break;
          case 36:
            { startNewYappingPath();
                                                        return YappingTypes.NATURAL;
            }
          // fall through
          case 82: break;
          case 37:
            { startNewYappingPathOpenStart();
                                                        return YappingTypes.LIST_START;
            }
          // fall through
          case 83: break;
          case 38:
            { startNewYappingPathRegexStart();
            }
          // fall through
          case 84: break;
          case 39:
            { startNewYappingPathOpenStart();
                                                        return YappingTypes.MAP_START;
            }
          // fall through
          case 85: break;
          case 40:
            { return YappingTypes.JBODY;
            }
          // fall through
          case 86: break;
          case 41:
            { yybegin(PENDING_JSCOPE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 87: break;
          case 42:
            { yybegin(PENDING_JSCOPE); return YappingTypes.COMMENT;
            }
          // fall through
          case 88: break;
          case 43:
            { yybegin(AFTER_JSCOPE); return YappingTypes.DOT;
            }
          // fall through
          case 89: break;
          case 44:
            { yybegin(BEFORE_JSCOPE); return YappingTypes.JNAME;
            }
          // fall through
          case 90: break;
          case 45:
            { startNewYappingPath();
                                                        return YappingTypes.TRANSITION_SEP_R;
            }
          // fall through
          case 91: break;
          case 46:
            { startNewYappingPath();
                                                        return YappingTypes.TRANSITION_SEP_L;
            }
          // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
